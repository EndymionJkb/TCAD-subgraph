// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class WipeBlacklistedAccount extends EthereumEvent {
  get params(): WipeBlacklistedAccount__Params {
    return new WipeBlacklistedAccount__Params(this);
  }
}

export class WipeBlacklistedAccount__Params {
  _event: WipeBlacklistedAccount;

  constructor(event: WipeBlacklistedAccount) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get balance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetRegistry extends EthereumEvent {
  get params(): SetRegistry__Params {
    return new SetRegistry__Params(this);
  }
}

export class SetRegistry__Params {
  _event: SetRegistry;

  constructor(event: SetRegistry) {
    this._event = event;
  }

  get registry(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetBurnBounds extends EthereumEvent {
  get params(): SetBurnBounds__Params {
    return new SetBurnBounds__Params(this);
  }
}

export class SetBurnBounds__Params {
  _event: SetBurnBounds;

  constructor(event: SetBurnBounds) {
    this._event = event;
  }

  get newMin(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newMax(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Burn extends EthereumEvent {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get burner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Mint extends EthereumEvent {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Approval extends EthereumEvent {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends EthereumEvent {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends EthereumEvent {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FiatTokenV1 extends SmartContract {
  static bind(address: Address): FiatTokenV1 {
    return new FiatTokenV1("FiatTokenV1", address);
  }

  burnMin(): BigInt {
    let result = super.call("burnMin", []);

    return result[0].toBigInt();
  }

  try_burnMin(): CallResult<BigInt> {
    let result = super.tryCall("burnMin", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", []);

    return result[0].toString();
  }

  try_name(): CallResult<string> {
    let result = super.tryCall("name", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  approve(_spender: Address, _value: BigInt): boolean {
    let result = super.call("approve", [
      EthereumValue.fromAddress(_spender),
      EthereumValue.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(_spender: Address, _value: BigInt): CallResult<boolean> {
    let result = super.tryCall("approve", [
      EthereumValue.fromAddress(_spender),
      EthereumValue.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): CallResult<BigInt> {
    let result = super.tryCall("totalSupply", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  transferFrom(_from: Address, _to: Address, _value: BigInt): boolean {
    let result = super.call("transferFrom", [
      EthereumValue.fromAddress(_from),
      EthereumValue.fromAddress(_to),
      EthereumValue.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_transferFrom(
    _from: Address,
    _to: Address,
    _value: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("transferFrom", [
      EthereumValue.fromAddress(_from),
      EthereumValue.fromAddress(_to),
      EthereumValue.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  rounding(): i32 {
    let result = super.call("rounding", []);

    return result[0].toI32();
  }

  try_rounding(): CallResult<i32> {
    let result = super.tryCall("rounding", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  decimals(): i32 {
    let result = super.call("decimals", []);

    return result[0].toI32();
  }

  try_decimals(): CallResult<i32> {
    let result = super.tryCall("decimals", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  minimumGasPriceForFutureRefunds(): BigInt {
    let result = super.call("minimumGasPriceForFutureRefunds", []);

    return result[0].toBigInt();
  }

  try_minimumGasPriceForFutureRefunds(): CallResult<BigInt> {
    let result = super.tryCall("minimumGasPriceForFutureRefunds", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  minimumGasPriceForRefund(): BigInt {
    let result = super.call("minimumGasPriceForRefund", []);

    return result[0].toBigInt();
  }

  try_minimumGasPriceForRefund(): CallResult<BigInt> {
    let result = super.tryCall("minimumGasPriceForRefund", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  burnMax(): BigInt {
    let result = super.call("burnMax", []);

    return result[0].toBigInt();
  }

  try_burnMax(): CallResult<BigInt> {
    let result = super.tryCall("burnMax", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    let result = super.call("paused", []);

    return result[0].toBoolean();
  }

  try_paused(): CallResult<boolean> {
    let result = super.tryCall("paused", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  decreaseApproval(_spender: Address, _subtractedValue: BigInt): boolean {
    let result = super.call("decreaseApproval", [
      EthereumValue.fromAddress(_spender),
      EthereumValue.fromUnsignedBigInt(_subtractedValue)
    ]);

    return result[0].toBoolean();
  }

  try_decreaseApproval(
    _spender: Address,
    _subtractedValue: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("decreaseApproval", [
      EthereumValue.fromAddress(_spender),
      EthereumValue.fromUnsignedBigInt(_subtractedValue)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(_who: Address): BigInt {
    let result = super.call("balanceOf", [EthereumValue.fromAddress(_who)]);

    return result[0].toBigInt();
  }

  try_balanceOf(_who: Address): CallResult<BigInt> {
    let result = super.tryCall("balanceOf", [EthereumValue.fromAddress(_who)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  registry(): Address {
    let result = super.call("registry", []);

    return result[0].toAddress();
  }

  try_registry(): CallResult<Address> {
    let result = super.tryCall("registry", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  remainingGasRefundPool(): BigInt {
    let result = super.call("remainingGasRefundPool", []);

    return result[0].toBigInt();
  }

  try_remainingGasRefundPool(): CallResult<BigInt> {
    let result = super.tryCall("remainingGasRefundPool", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", []);

    return result[0].toString();
  }

  try_symbol(): CallResult<string> {
    let result = super.tryCall("symbol", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  transfer(_to: Address, _value: BigInt): boolean {
    let result = super.call("transfer", [
      EthereumValue.fromAddress(_to),
      EthereumValue.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(_to: Address, _value: BigInt): CallResult<boolean> {
    let result = super.tryCall("transfer", [
      EthereumValue.fromAddress(_to),
      EthereumValue.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  increaseApproval(_spender: Address, _addedValue: BigInt): boolean {
    let result = super.call("increaseApproval", [
      EthereumValue.fromAddress(_spender),
      EthereumValue.fromUnsignedBigInt(_addedValue)
    ]);

    return result[0].toBoolean();
  }

  try_increaseApproval(
    _spender: Address,
    _addedValue: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("increaseApproval", [
      EthereumValue.fromAddress(_spender),
      EthereumValue.fromUnsignedBigInt(_addedValue)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  allowance(_who: Address, _spender: Address): BigInt {
    let result = super.call("allowance", [
      EthereumValue.fromAddress(_who),
      EthereumValue.fromAddress(_spender)
    ]);

    return result[0].toBigInt();
  }

  try_allowance(_who: Address, _spender: Address): CallResult<BigInt> {
    let result = super.tryCall("allowance", [
      EthereumValue.fromAddress(_who),
      EthereumValue.fromAddress(_spender)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): CallResult<Address> {
    let result = super.tryCall("pendingOwner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  gasRefundPool(_index: BigInt): BigInt {
    let result = super.call("gasRefundPool", [
      EthereumValue.fromUnsignedBigInt(_index)
    ]);

    return result[0].toBigInt();
  }

  try_gasRefundPool(_index: BigInt): CallResult<BigInt> {
    let result = super.tryCall("gasRefundPool", [
      EthereumValue.fromUnsignedBigInt(_index)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveCall extends EthereumCall {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetMinimumGasPriceForFutureRefundsCall extends EthereumCall {
  get inputs(): SetMinimumGasPriceForFutureRefundsCall__Inputs {
    return new SetMinimumGasPriceForFutureRefundsCall__Inputs(this);
  }

  get outputs(): SetMinimumGasPriceForFutureRefundsCall__Outputs {
    return new SetMinimumGasPriceForFutureRefundsCall__Outputs(this);
  }
}

export class SetMinimumGasPriceForFutureRefundsCall__Inputs {
  _call: SetMinimumGasPriceForFutureRefundsCall;

  constructor(call: SetMinimumGasPriceForFutureRefundsCall) {
    this._call = call;
  }

  get _minimumGasPriceForFutureRefunds(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinimumGasPriceForFutureRefundsCall__Outputs {
  _call: SetMinimumGasPriceForFutureRefundsCall;

  constructor(call: SetMinimumGasPriceForFutureRefundsCall) {
    this._call = call;
  }
}

export class TransferFromCall extends EthereumCall {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SponsorGasCall extends EthereumCall {
  get inputs(): SponsorGasCall__Inputs {
    return new SponsorGasCall__Inputs(this);
  }

  get outputs(): SponsorGasCall__Outputs {
    return new SponsorGasCall__Outputs(this);
  }
}

export class SponsorGasCall__Inputs {
  _call: SponsorGasCall;

  constructor(call: SponsorGasCall) {
    this._call = call;
  }
}

export class SponsorGasCall__Outputs {
  _call: SponsorGasCall;

  constructor(call: SponsorGasCall) {
    this._call = call;
  }
}

export class ReclaimContractCall extends EthereumCall {
  get inputs(): ReclaimContractCall__Inputs {
    return new ReclaimContractCall__Inputs(this);
  }

  get outputs(): ReclaimContractCall__Outputs {
    return new ReclaimContractCall__Outputs(this);
  }
}

export class ReclaimContractCall__Inputs {
  _call: ReclaimContractCall;

  constructor(call: ReclaimContractCall) {
    this._call = call;
  }

  get _ownable(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ReclaimContractCall__Outputs {
  _call: ReclaimContractCall;

  constructor(call: ReclaimContractCall) {
    this._call = call;
  }
}

export class MintCall extends EthereumCall {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class BurnCall extends EthereumCall {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall extends EthereumCall {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class SetBurnBoundsCall extends EthereumCall {
  get inputs(): SetBurnBoundsCall__Inputs {
    return new SetBurnBoundsCall__Inputs(this);
  }

  get outputs(): SetBurnBoundsCall__Outputs {
    return new SetBurnBoundsCall__Outputs(this);
  }
}

export class SetBurnBoundsCall__Inputs {
  _call: SetBurnBoundsCall;

  constructor(call: SetBurnBoundsCall) {
    this._call = call;
  }

  get _min(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _max(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetBurnBoundsCall__Outputs {
  _call: SetBurnBoundsCall;

  constructor(call: SetBurnBoundsCall) {
    this._call = call;
  }
}

export class DecreaseApprovalCall extends EthereumCall {
  get inputs(): DecreaseApprovalCall__Inputs {
    return new DecreaseApprovalCall__Inputs(this);
  }

  get outputs(): DecreaseApprovalCall__Outputs {
    return new DecreaseApprovalCall__Outputs(this);
  }
}

export class DecreaseApprovalCall__Inputs {
  _call: DecreaseApprovalCall;

  constructor(call: DecreaseApprovalCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseApprovalCall__Outputs {
  _call: DecreaseApprovalCall;

  constructor(call: DecreaseApprovalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ReclaimTokenCall extends EthereumCall {
  get inputs(): ReclaimTokenCall__Inputs {
    return new ReclaimTokenCall__Inputs(this);
  }

  get outputs(): ReclaimTokenCall__Outputs {
    return new ReclaimTokenCall__Outputs(this);
  }
}

export class ReclaimTokenCall__Inputs {
  _call: ReclaimTokenCall;

  constructor(call: ReclaimTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ReclaimTokenCall__Outputs {
  _call: ReclaimTokenCall;

  constructor(call: ReclaimTokenCall) {
    this._call = call;
  }
}

export class ReclaimEtherCall extends EthereumCall {
  get inputs(): ReclaimEtherCall__Inputs {
    return new ReclaimEtherCall__Inputs(this);
  }

  get outputs(): ReclaimEtherCall__Outputs {
    return new ReclaimEtherCall__Outputs(this);
  }
}

export class ReclaimEtherCall__Inputs {
  _call: ReclaimEtherCall;

  constructor(call: ReclaimEtherCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ReclaimEtherCall__Outputs {
  _call: ReclaimEtherCall;

  constructor(call: ReclaimEtherCall) {
    this._call = call;
  }
}

export class TransferCall extends EthereumCall {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetRegistryCall extends EthereumCall {
  get inputs(): SetRegistryCall__Inputs {
    return new SetRegistryCall__Inputs(this);
  }

  get outputs(): SetRegistryCall__Outputs {
    return new SetRegistryCall__Outputs(this);
  }
}

export class SetRegistryCall__Inputs {
  _call: SetRegistryCall;

  constructor(call: SetRegistryCall) {
    this._call = call;
  }

  get _registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRegistryCall__Outputs {
  _call: SetRegistryCall;

  constructor(call: SetRegistryCall) {
    this._call = call;
  }
}

export class WipeBlacklistedAccountCall extends EthereumCall {
  get inputs(): WipeBlacklistedAccountCall__Inputs {
    return new WipeBlacklistedAccountCall__Inputs(this);
  }

  get outputs(): WipeBlacklistedAccountCall__Outputs {
    return new WipeBlacklistedAccountCall__Outputs(this);
  }
}

export class WipeBlacklistedAccountCall__Inputs {
  _call: WipeBlacklistedAccountCall;

  constructor(call: WipeBlacklistedAccountCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WipeBlacklistedAccountCall__Outputs {
  _call: WipeBlacklistedAccountCall;

  constructor(call: WipeBlacklistedAccountCall) {
    this._call = call;
  }
}

export class SponsorGas2Call extends EthereumCall {
  get inputs(): SponsorGas2Call__Inputs {
    return new SponsorGas2Call__Inputs(this);
  }

  get outputs(): SponsorGas2Call__Outputs {
    return new SponsorGas2Call__Outputs(this);
  }
}

export class SponsorGas2Call__Inputs {
  _call: SponsorGas2Call;

  constructor(call: SponsorGas2Call) {
    this._call = call;
  }
}

export class SponsorGas2Call__Outputs {
  _call: SponsorGas2Call;

  constructor(call: SponsorGas2Call) {
    this._call = call;
  }
}

export class IncreaseApprovalCall extends EthereumCall {
  get inputs(): IncreaseApprovalCall__Inputs {
    return new IncreaseApprovalCall__Inputs(this);
  }

  get outputs(): IncreaseApprovalCall__Outputs {
    return new IncreaseApprovalCall__Outputs(this);
  }
}

export class IncreaseApprovalCall__Inputs {
  _call: IncreaseApprovalCall;

  constructor(call: IncreaseApprovalCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseApprovalCall__Outputs {
  _call: IncreaseApprovalCall;

  constructor(call: IncreaseApprovalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends EthereumCall {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class SyncAttributeValueCall extends EthereumCall {
  get inputs(): SyncAttributeValueCall__Inputs {
    return new SyncAttributeValueCall__Inputs(this);
  }

  get outputs(): SyncAttributeValueCall__Outputs {
    return new SyncAttributeValueCall__Outputs(this);
  }
}

export class SyncAttributeValueCall__Inputs {
  _call: SyncAttributeValueCall;

  constructor(call: SyncAttributeValueCall) {
    this._call = call;
  }

  get _who(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _attribute(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SyncAttributeValueCall__Outputs {
  _call: SyncAttributeValueCall;

  constructor(call: SyncAttributeValueCall) {
    this._call = call;
  }
}
